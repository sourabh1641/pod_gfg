class Solution
{
    public int longestPalinSubseq(String S)
    {
    
         int n = S.length();
        int[][] dp = new int[n][n];

        // Initialize the diagonal elements with 1
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        // Fill the dp table diagonally from bottom to top
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (S.charAt(i) == S.charAt(j)) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }

        // Return the length of the longest palindromic subsequence
        return dp[0][n - 1];
    }
    
}
